<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo Next 添加点击爱心效果]]></title>
    <url>%2F2018%2F06%2F07%2FHexo-Next-%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E7%88%B1%E5%BF%83%E6%95%88%E6%9E%9C%2Findex%2Findex%2F</url>
    <content type="text"><![CDATA[给NexT主题内添加页面点击出现爱心的效果 创建js文件在/themes/next/source/js/src下新建文件clicklove.js，接着把该链接下的代码拷贝粘贴到clicklove.js文件中。 代码如下： 1!function(e,t,a)&#123;function n()&#123;c(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText="left:"+d[e].x+"px;top:"+d[e].y+"px;opacity:"+d[e].alpha+";transform:scale("+d[e].scale+","+d[e].scale+") rotate(45deg);background:"+d[e].color+";z-index:99999");requestAnimationFrame(r)&#125;function o()&#123;var t="function"==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement("div");a.className="heart",d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement("style");a.type="text/css";try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function s()&#123;return"rgb("+~~(255*Math.random())+","+~~(255*Math.random())+","+~~(255*Math.random())+")"&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document); 修改_layout.swig在\themes\next\layout\_layout.swig文件末尾添加： 12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt; 刷新页面，即可实现点击出现爱心效果。]]></content>
      <categories>
        <category>hexo</category>
        <category>next</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo NexT主题下添加相册模块]]></title>
    <url>%2F2018%2F06%2F07%2FHexo-NexT%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%A8%A1%E5%9D%97%2FHexo-NexT%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%A8%A1%E5%9D%97%2F</url>
    <content type="text"><![CDATA[新建相册页面首先新建相册页面hexo new page photos,将会在source/下创建photos/index.md，在其中添加type: photos。 _config.yml在主题_config.yml文件中对应位置menu里添加Photos: /photos/，这样生成后就能在页面的菜单栏中出现相册选项。 json在博客根目录下新建uploadPhotos文件夹，里面将会存放照片以及相关js文件。新建uploadPhotos/Images/文件夹，然后在其中存放需要在页面中展示的照片集（在GitHub中新建相册库，并上传图片）。新建uploadPhotos/tool.js文件，里面内容如下，主要功能是访问照片文件夹，获取每张照片的size和name，并生成对应的json文件：命令：Git Bash中键入 node tool.js生成json。注：若出现Error: Cannot find module &#39;image-size&#39;问题，请在Git Bash中键入对应命令npm install image-size进行安装。1234567891011121314151617181920212223242526272829&quot;use strict&quot;; const fs = require(&quot;fs&quot;); const sizeOf = require(&apos;image-size&apos;); const path = &quot;Images&quot;; const output = &quot;../themes/next/source/photos/photoslist.json&quot;; var dimensions; fs.readdir(path, function (err, files) &#123; if (err) &#123; return; &#125; let arr = []; (function iterator(index) &#123; if (index == files.length) &#123; fs.writeFile(output, JSON.stringify(arr, null, &quot;\t&quot;)); return; &#125; fs.stat(path + &quot;/&quot; + files[index], function (err, stats) &#123; if (err) &#123; return; &#125; if (stats.isFile()) &#123; dimensions = sizeOf(path + &quot;/&quot; + files[index]); console.log(dimensions.width, dimensions.height); arr.push(dimensions.width + &apos;.&apos; + dimensions.height + &apos; &apos; + files[index]); &#125; iterator(index + 1); &#125;) &#125;(0)); &#125;); json文件样例如下(图片宽度.图片高度+空格+图片名.图片格式):12345678[ &quot;440.556 IMG_0101.jpg&quot;, &quot;440.613 IMG_0102.jpg&quot;, &quot;440.612 IMG_0103.jpg&quot;, &quot;440.612 IMG_0104.jpg&quot;, &quot;200.245 IMG_0105.jpg&quot;, &quot;440.610 IMG_0106.jpg&quot;,] photo.js新建themes/next/source/photos/photo.js文件，其中photos文件夹是自己创建的.photos.js内容如下，主要功能是访问json文件内容，遍历每行数据，并在页面对应位置上放置代码，展示图片（其中图片链接为自个GitHub相册库中图片的链接）：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647photo =&#123; page: 1, offset: 20, init: function () &#123; var that = this; $.getJSON(&quot;/photos/photoslist.json&quot;, function (data) &#123; that.render(that.page, data); //that.scroll(data); &#125;); &#125;, render: function (page, data) &#123; var begin = (page - 1) * this.offset; var end = page * this.offset; if (begin &gt;= data.length) return; var html, imgNameWithPattern, imgName, imageSize, imageX, imageY, li = &quot;&quot;; for (var i = begin; i &lt; end &amp;&amp; i &lt; data.length; i++) &#123; imgNameWithPattern = data[i].split(&apos; &apos;)[1]; imgName = imgNameWithPattern.split(&apos;.&apos;)[0] imageSize = data[i].split(&apos; &apos;)[0]; imageX = imageSize.split(&apos;.&apos;)[0]; imageY = imageSize.split(&apos;.&apos;)[1]; li += &apos;&lt;div class=&quot;card&quot; style=&quot;width:330px&quot;&gt;&apos; + &apos;&lt;div class=&quot;ImageInCard&quot; style=&quot;height:&apos;+ 330 * imageY / imageX + &apos;px&quot;&gt;&apos; + &apos;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;https://github.com/asdfv1929/BlogPhotos/blob/master/Images/&apos; + imgNameWithPattern + &apos;?raw=true&quot; data-caption=&quot;&apos; + imgName + &apos;&quot;&gt;&apos; + &apos;&lt;img src=&quot;https://github.com/asdfv1929/BlogPhotos/blob/master/Images/&apos; + imgNameWithPattern + &apos;?raw=true&quot;/&gt;&apos; + &apos;&lt;/a&gt;&apos; + &apos;&lt;/div&gt;&apos; + // &apos;&lt;div class=&quot;TextInCard&quot;&gt;&apos; + imgName + &apos;&lt;/div&gt;&apos; + &apos;&lt;/div&gt;&apos; &#125; $(&quot;.ImageGrid&quot;).append(li); $(&quot;.ImageGrid&quot;).lazyload(); this.minigrid(); &#125;, minigrid: function() &#123; var grid = new Minigrid(&#123; container: &apos;.ImageGrid&apos;, item: &apos;.card&apos;, gutter: 12 &#125;); grid.mount(); $(window).resize(function() &#123; grid.mount(); &#125;); &#125;&#125;photo.init(); photos.swig新建themes/next/layout/photos.swig文件，其内容模仿tag.swig中内容（直接复制粘贴），然后将其中的tag全部替换为photos。 photos.css新建themes/next/source/photos/photos.css样式文件，内容如下：12345.ImageGrid &#123;width: 100%;max-width: 1040px;margin: 0 auto; text-align: center;&#125;.card &#123;overflow: hidden;transition: .3s ease-in-out; border-radius: 8px; background-color: #ddd;&#125;.ImageInCard &#123;&#125;.ImageInCard img &#123;padding: 0 0 0 0;&#125;.TextInCard &#123;line-height: 54px; background-color: #ffffff; font-size: 24px;&#125; page.swig修改themes/next/layout/page.swig文件，添加下面代码中中间page.type === “photos”那两行。123456789101112&#123;% block title %&#125;&#123;##&#125;&#123;% set page_title_suffix = &apos; | &apos; + config.title %&#125;&#123;##&#125;&#123;% if page.type === &quot;categories&quot; and not page.title %&#125;&#123;# #&#125;&#123;&#123; __(&apos;title.category&apos;) + page_title_suffix &#125;&#125;&#123;##&#125;&#123;% elif page.type === &quot;tags&quot; and not page.title %&#125;&#123;# #&#125;&#123;&#123; __(&apos;title.tag&apos;) + page_title_suffix &#125;&#125;&#123;##&#125;&#123;% elif page.type === &quot;photos&quot; and not page.title %&#125;&#123;# #&#125;&#123;&#123; __(&apos;title.photos&apos;) + page_title_suffix &#125;&#125;&#123;##&#125;&#123;% else %&#125;&#123;# #&#125;&#123;&#123; page.title + page_title_suffix &#125;&#125;&#123;##&#125;&#123;% endif %&#125;&#123;##&#125;&#123;% endblock %&#125; _layout.swig在主题_layout.swig文件末尾，添加内容：123456&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/lazyload@2.0.0-beta.2/lazyload.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://unpkg.com/minigrid@3.1.1/dist/minigrid.min.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;/photos/photos.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/photos/photo.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.3.5/jquery.fancybox.min.css&quot; /&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.3.5/jquery.fancybox.min.js&quot;&gt;&lt;/script&gt; 整个过程结束，查看图片是否以瀑布流的方式呈现。 总结 在花了两天的时间来实现相册模块，网上查阅了很多博文，期间碰到很多问题都一一解决了。期间花费时间最长的一个问题是图片无法加载，后来发现是图片链接地址写错，真的是坑。将照片存放在一个新的github仓库中，单个照片的链接居然跟外层的链接不一样。我还以为是其他地方出了问题，一直在改其他地方。 参考链接博主给了我很大帮助，在此表示感谢。 参考链接Hexo NexT主题内添加相册功能]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[海康前端开发实习面经]]></title>
    <url>%2F2018%2F06%2F05%2F%E6%B5%B7%E5%BA%B7%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F%2F%E6%B5%B7%E5%BA%B7%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F%2F</url>
    <content type="text"><![CDATA[自我介绍 Ajax相关知识 数据库增删改查 如何获取元素（DOM操作） 盒模型 存储cookie、sessionStorage、localStorage 常用的http状态码 常用的http请求方式 GET和POST区别 闭包、作用域 事件冒泡、事件捕获 布局，div+css 框架vue组件相互通信、jquery、bootStrap 对后端有了解么]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里前端开发实习生面经]]></title>
    <url>%2F2018%2F06%2F04%2F%E9%98%BF%E9%87%8C%E9%9D%A2%E7%BB%8F%2F%E9%98%BF%E9%87%8C%E9%9D%A2%E7%BB%8F%2F</url>
    <content type="text"><![CDATA[阿里一面 自我介绍一下 DOCTYPE是什么，有几种模式，分别阐述一下 CSS盒模型在W3C下和IE下有什么不同 有一堆2分、3分、5分的硬币，要凑成一块钱，有几种组合，用代码实现一下 一个ul下面有很多li，把这些li倒过来放置（包括里面的内容），用DOM操作实现一下 一个li绑定了一个事件，然后把这个li删除了，问这个事件还存在么，为什么 为什么想从事前端开发 阿里二面 自我介绍，说了有发明专利公开，先讲一下发明专利的东西 箭头函数(作用域) 数组常用的API 事件传播过程（事件冒泡和事件捕获） addEventListener有几个参数，第三个参数什么意思 setTimeout有几个参数，如果第二个参数设置为0，会立即执行么（单线程） 前序遍历不用递归写，先用栈写，再用队列写 看了哪些前端开方方面的书 最快的排序是哪种，快排的实现原理，罗列出所有时间复杂度nlogn的排序算法 在搭建个人博客中遇到的问题 阿里三面 用三句简短的话介绍下自己 阐述一下专利的内容以及应用场景 为什么想从事前端开发 最近在干什么（搭博客） 有没有自己的代码沉淀？？？？ 项目中遇到哪些问题怎么解决的 Github中有没有可以展示的作品 讲一下最近一篇博客写了什么 笔试中一道编程题实现一下（CSS选择器）]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何用HEXO+github搭建个人博客]]></title>
    <url>%2F2017%2F11%2F02%2Fhello%2Fhello%2F</url>
    <content type="text"><![CDATA[如何用HEXO+github搭建个人博客HEXO是一个简单的、轻量的、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github上。原理：github存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的内容就是讲这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。系统环境配置：要使用Hexo，需要在你的系统中支持Node.js以及Git。安装Node（必须），作用：用来生成静态页面，到Node.js官网下载和自己电脑相匹配的版本，除了指定安装路径，一路安装即可。安装Git（必须），作用：把本地的hexo内容提交到github上去，申请github账号，作用：是用来做博客的远成仓库、域名、服务器之类的。验证软件是否安装正确：同时按下win键或R键（或点击“开始菜单”&gt;点击“运行”），打开运行窗口，输入“cmd”，然后输入以下命令：显示版本信息，说明安装成功。申请gitub账号：注册完成后，点击“New repository”，新建一个版本库。输入repository name:yourname.github.io(yourname与你的注册用户名一致，这就是你博客的域名了)。到此，github账号申请完成。安装hexo：在自己认为合适的地方创建一个文件夹，这里以E：/hexo为例，首先在E盘目录下创建HEXO文件夹，并在命令行的窗口进入到该目录下在命令行中输入：可能会看到一个WARN，但是不用担心，不会影响正常使用，然后输入：等待进度条安装到100，然后测试hexo是否安装完成，输入：安装完成。HEXO的相关配置：1.初始化HEXO，接着上面的操作，输入：再输入：之后npm将会自动安装你需要的组件，只需等待npm操作即可。2.首次体验HEXO继续操作，同样在命令行输入：然后输入：提示：在浏览器中打开http://localhost:4000/，你将会看到：HEXO常用的几个命令：（1） hexo generate (hexo g)生成静态文件，会在当前目录下生成一个新的叫做public的文件夹（2） hexo server(hexo s)启动本地web服务，用于博客的预览（3） hexo deploy(hexo d)部署博客到远端（GitHub平台）将HEXO与github联系起来：大致分为两步：（1）配置git个人信息；（2）配置Deployment Hexo不是处理命令时：$ npm install hexo -g]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP报文格式解析]]></title>
    <url>%2F2017%2F11%2F02%2FHTTP%2FHTTP%2F</url>
    <content type="text"><![CDATA[HTTP报文格式解析一．概述HTTP报文是面向文本的，报文中的每一个字段都是ASCII码串，各个字段的长度是不确定的。HTTP有两类报文：请求报文和响应报文。]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP协议</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cookie、sessionStorage区别]]></title>
    <url>%2F2017%2F09%2F29%2Fcookie%E3%80%81sessionStorage%E5%8C%BA%E5%88%AB%2Fcookie%E3%80%81sessionStorage%E5%8C%BA%E5%88%AB%2F</url>
    <content type="text"><![CDATA[cookie 和session 的区别详解:1、cookie数据存放在客户的浏览器上，session数据放在服务器上。 2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗 考虑到安全应当使用session。3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能 考虑到减轻服务器性能方面，应当使用COOKIE。 4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。 5、所以个人建议： 将登陆信息等重要信息存放为SESSION 其他信息如果需要保留，可以放在COOKIE中]]></content>
      <categories>
        <category>存储</category>
      </categories>
      <tags>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指offer(3)]]></title>
    <url>%2F2017%2F09%2F15%2Foffer%2Foffer%2F</url>
    <content type="text"><![CDATA[题目：输入一个链表，从尾到头打印链表每个节点的值。function printListFromTailToHead(head){ var arr = []; while(head!=null){ arr.push(head.val); head = head.next; } return arr.reverse();}思路：先将链表每个结点的值存入数组中，然后通过数组的reverse()方法，即可从尾到头打印。]]></content>
      <categories>
        <category>剑指offer</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo生成博文插入图片]]></title>
    <url>%2F2017%2F09%2F11%2Fhexo%E5%8D%9A%E6%96%87%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%2Fhexo%E5%8D%9A%E6%96%87%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[1.把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true。2.在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git。3.等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹。4.最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：。注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。5.最后检查一下，hexo g生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，html标签内的语句是&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;，而不是&lt;img src=&quot;xxxx/图片名.jpg&quot;&gt;。这很重要，关乎你的网页是否可以真正加载你想插入的图片。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指offer(2):替换空格]]></title>
    <url>%2F2017%2F09%2F10%2Foffer%2F%E5%89%91%E6%8C%87offer(2)%2F</url>
    <content type="text"><![CDATA[题目：请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。function replaceSpace(str){ return str.replace(/\s/g,’%20’);}思路：用正则表达式查找数字组中的所有空格，然后用str.replace替换。]]></content>
      <categories>
        <category>剑指offer</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指offer(1):二维数组中的查找]]></title>
    <url>%2F2017%2F09%2F10%2Foffer%2F%E5%89%91%E6%8C%87offer(1)%2F</url>
    <content type="text"><![CDATA[题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。function Find(target, array){ var row = array.length; //行数 var col = array[0].length; //列数 var r = row-1; //从左下角开始比较 var c = 0; while( r &gt;= 0 &amp;&amp; c &lt;= col-1){ if(target &gt; array[r][c]){ c++; }else if(target &lt; array[r][c]){ r–; }else{ return true; } } return false;}思路：因为矩阵的特殊性，所以先从最后一行第一列开始比较，小于则向上查找，大于则向后查找。]]></content>
      <categories>
        <category>剑指offer</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
