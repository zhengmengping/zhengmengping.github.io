<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Healer&#39;s Blog</title>
  
  <subtitle>世界上最美好的事物都是免费的</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-14T02:55:03.696Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>healer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AMD、CMD、CommonJS和ES6对比</title>
    <link href="http://yoursite.com/2018/06/14/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2018/06/14/模块化开发/模块化开发/</id>
    <published>2018-06-14T02:30:30.000Z</published>
    <updated>2018-06-14T02:55:03.696Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1528953713981&amp;di=fbd26cc3f88400b9e7bd6ade9c7e9e42&amp;imgtype=0&amp;src=http%3A%2F%2Fbpic.ooopic.com%2F15%2F97%2F65%2F15976521-c00b74c83a5bd9a808cb29a76b6beb12-2.jpg" alt="图片描述"></p><a id="more"></a><hr><h1 id="什么是AMD、CMD、CommonJS-它们之间有什么区别？项目当中都是如何运用的？"><a href="#什么是AMD、CMD、CommonJS-它们之间有什么区别？项目当中都是如何运用的？" class="headerlink" title="什么是AMD、CMD、CommonJS?它们之间有什么区别？项目当中都是如何运用的？"></a>什么是AMD、CMD、CommonJS?它们之间有什么区别？项目当中都是如何运用的？</h1><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>AMD：异步模块定义</p><p>AMD是RequireJS在推广过程中对模块定义的规范化产出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">define([&apos;package/lib&apos;],function(lib)&#123;</div><div class="line">function foo()&#123;</div><div class="line">lib.log(&apos;hello world&apos;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">return &#123;</div><div class="line">foo: foo</div><div class="line">&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>CMD:同步模块定义</p><p>CMD是SeaJS在推广过程中对模块定义的规范化产出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//所有的模块都通过define来定义</div><div class="line">define(function(require,exports,module))&#123;</div><div class="line">//通过reqiure引入依赖</div><div class="line">var $ = require(&apos;jquery&apos;);</div><div class="line">var Spinning = require(&apos;./spinning&apos;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>CommonJS:通过<code>module.exports</code>来定义的</p><p>在服务端一般通过<code>CommonJS</code>来定义模块化开发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">exports.area = function(r)&#123;</div><div class="line">return Math.PI * r * r;</div><div class="line">&#125;;</div><div class="line">exports.circumference = function(r)&#123;</div><div class="line">return 2 * Math.PI * r;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>ES6通过export/import来定义输入输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">export default&#123;</div><div class="line">props:[&quot;num&quot;],</div><div class="line">data()&#123;</div><div class="line">return&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;,</div><div class="line">methods:&#123;</div><div class="line">increment()&#123;</div><div class="line">this.$emit(&quot;incre&quot;);</div><div class="line">import(&apos;./../util&apos;)</div><div class="line">&#125;,</div><div class="line">decrement()&#123;</div><div class="line">this.$emit(&quot;decre&quot;);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1528953713981&amp;amp;di=fbd26cc3f88400b9e7bd6ade9c7e9e42&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fbpic.ooopic.com%2F15%2F97%2F65%2F15976521-c00b74c83a5bd9a808cb29a76b6beb12-2.jpg&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="模块化开发" scheme="http://yoursite.com/categories/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="AMD" scheme="http://yoursite.com/tags/AMD/"/>
    
      <category term="CMD" scheme="http://yoursite.com/tags/CMD/"/>
    
      <category term="CommonJS" scheme="http://yoursite.com/tags/CommonJS/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>路由基础</title>
    <link href="http://yoursite.com/2018/06/13/%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80/%E8%B7%AF%E7%94%B1%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/06/13/路由基础/路由基础/</id>
    <published>2018-06-13T12:59:32.000Z</published>
    <updated>2018-06-13T13:08:01.224Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1528905045082&amp;di=7a567cd7b46c2269880c07466872b163&amp;imgtype=0&amp;src=http%3A%2F%2Fbpic.ooopic.com%2F15%2F94%2F62%2F15946244-7cbf926a178aad3d113577d552277c7c-0.jpg" alt="图片描述"></p><a id="more"></a><hr><h1 id="什么是前端路由？"><a href="#什么是前端路由？" class="headerlink" title="什么是前端路由？"></a>什么是前端路由？</h1><ul><li>路由是根据不同url地址展示不同的内容或者页面</li><li>前端路由就是把不同路由对应不同的内容或页面的任务交给前端来做，之前是通过服务端根据url的不同返回不同的页面实现的</li></ul><h1 id="什么时候使用前端路由？"><a href="#什么时候使用前端路由？" class="headerlink" title="什么时候使用前端路由？"></a>什么时候使用前端路由？</h1><p>在单页面应用，大部分页面结构不变，只改变部分内容时使用</p><h1 id="前端路由有什么优缺点？"><a href="#前端路由有什么优缺点？" class="headerlink" title="前端路由有什么优缺点？"></a>前端路由有什么优缺点？</h1><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>用户体验好，不需要每次都从服务器全部获取。快速展现给用户</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>不利于seo；</li><li>使用浏览器的前进、后退键的时候会重新发送请求，没有合理的利用缓存；</li><li>单页面无法记住之前滚动的位置，无法在前进、后退的时候记住滚动的位置。</li></ul><p><code>vue-router</code>是用来构建<code>SPA</code>的关键</p><p><code>&lt;router-link&gt;&lt;/router-link&gt;</code>或者<code>this.$router.push({path:&quot;})</code>     (本质就是a标签，实现跳转)</p><p><code>&lt;router-view&gt;&lt;/router-view&gt;</code>   (实现渲染)</p><h1 id="什么是命名路由和命名视图？"><a href="#什么是命名路由和命名视图？" class="headerlink" title="什么是命名路由和命名视图？"></a>什么是命名路由和命名视图？</h1><ul><li><p>给路由定义不同的名字，根据名字进行匹配</p></li><li><p>给不同的<code>router-view</code>定义名字，通过名字进行对应组件的渲染</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1528905045082&amp;amp;di=7a567cd7b46c2269880c07466872b163&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fbpic.ooopic.com%2F15%2F94%2F62%2F15946244-7cbf926a178aad3d113577d552277c7c-0.jpg&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
      <category term="路由" scheme="http://yoursite.com/categories/Vue/%E8%B7%AF%E7%94%B1/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="路由" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>如何把本地项目上传至github仓库</title>
    <link href="http://yoursite.com/2018/06/11/%E5%A6%82%E4%BD%95%E6%8A%8A%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E8%87%B3github%E4%BB%93%E5%BA%93/%E5%A6%82%E4%BD%95%E6%8A%8A%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E8%87%B3github%E4%BB%93%E5%BA%93/"/>
    <id>http://yoursite.com/2018/06/11/如何把本地项目上传至github仓库/如何把本地项目上传至github仓库/</id>
    <published>2018-06-11T12:46:12.000Z</published>
    <updated>2018-06-11T13:04:08.504Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1528731397090&amp;di=e4814b50dc274bf41854176332e21d43&amp;imgtype=0&amp;src=http%3A%2F%2Fbpic.ooopic.com%2F16%2F06%2F82%2F16068219-24684eef665b135cfbc1aad565cae0ca-0.jpg" alt="图片描述"></p><a id="more"></a><p>将本地项目上传至github仓库需要以下几个步骤：</p><ul><li>在本地创建一个版本库（即文件夹），通过<code>git init</code>把它变成git仓库；</li><li>把项目复制到这个文件夹中，再通过<code>git add .</code>把项目添加到暂存区；</li><li>再通过<code>git commit -m &quot;注释内容&quot;</code>把项目提交到仓库；</li><li>新建一个远程仓库，通过<code>git remote add origin &quot;仓库地址&quot;</code>将本地仓库和远程仓库进行关联；</li><li>最后通过<code>git push -u origin master</code>(新建的远程仓库是空的，所以要加上-u这个参数，等远程仓库里面有了内容之后，下次再次从本地仓库上传内容的时候只需要这样<code>git push origin master</code>即可)把本地仓库的项目推送到远程仓库（也就是github）上。</li></ul><p>注：若新建远程仓库的时候自动创建了README文件(如果你勾选了<code>Initialize this repository with a README</code>创建仓库的时候会自动给你创建一个README文件)会报错<code>failed to push some refs to  https://github.com/guyibang/TEST2.git</code>，解决方法：<code>git pull --rebase origin master</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1528731397090&amp;amp;di=e4814b50dc274bf41854176332e21d43&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fbpic.ooopic.com%2F16%2F06%2F82%2F16068219-24684eef665b135cfbc1aad565cae0ca-0.jpg&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>canvas入门（一）</title>
    <link href="http://yoursite.com/2018/06/11/canvas%E5%85%A5%E9%97%A8/canvas%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/06/11/canvas入门/canvas入门/</id>
    <published>2018-06-11T03:30:06.000Z</published>
    <updated>2018-06-11T12:31:46.318Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1528698052121&amp;di=3afe6c1dd4f64bacf4898fb75980a4e7&amp;imgtype=0&amp;src=http%3A%2F%2Fbpic.ooopic.com%2F15%2F92%2F19%2F15921940-3d2f72ce896b5ad59ccf086e7f6ceb37-0.jpg" alt="图片"></p><a id="more"></a><h1 id="理解canvas元素"><a href="#理解canvas元素" class="headerlink" title="理解canvas元素"></a>理解canvas元素</h1><p>HTML5添加的最受欢迎的元素就是canvas元素。这个元素负责在页面中设置一个区域，然后可以通过JavaScript动态的在这个区域中绘制图形。</p><p>要使用canvas元素，必须先设置其width和height属性，指定可以绘图的区域大小。与其他元素一样，canvas也能通过css为该元素添加样式，如果不添加任何样式或者不绘制任何图形在页面中是看不到该元素的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;canvas id = &quot;drawing&quot; width=&quot;200&quot; height=&quot;200&quot;&gt;A drawing of something.&lt;/canvas&gt;</div></pre></td></tr></table></figure><p>要在这块画布上绘图，需要取得绘图上下文。而取得绘图上下文对象的引用，需要调用getcontext()方法并传入上下文的名字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var drawing = document.getElementById(&quot;drawing&quot;);</div><div class="line">//确定浏览器支持&lt;canvas&gt;元素</div><div class="line">if(drawing.getContext)&#123;</div><div class="line">var context = drawing.getContext(&quot;2d&quot;);</div><div class="line">//代码</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在使用canvas元素之前，首先要检测getcontext()方法是否存在，这一步非常重要。</p><h1 id="2D上下文"><a href="#2D上下文" class="headerlink" title="2D上下文"></a>2D上下文</h1><p>使用2D绘图上下文提供的方法，可以绘制简单的2D图形，如矩形、弧线和路径等。2D上下文的坐标开始于<canvas>元素的左上角，原点坐标是(0,0)。所有坐标都基于这个原点计算，x值越大表示越靠右，y值越大表示越靠下。默认情况下，width和height表示水平和垂直方向上可用的像素数目。</canvas></p><h1 id="填充和描边"><a href="#填充和描边" class="headerlink" title="填充和描边"></a>填充和描边</h1><p>2D上下文的基本绘图操作是填充和描边。填充，就是用指定的样式（颜色、渐变和图像）填充图形；描边，就是只在图形的边缘画线。大多数2D上下文操作都会细分为填充和描边两个操作，而操作的结果取决于两个属性：fillStyle和strokeStyle。</p><h1 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h1><p>矩形是唯一一种可以直接在2D上下文中绘制的形状。与矩形有关的方法包括fillRect()、strokeRect()和clearRect()。这三个方法都能接收4个参数：矩形的x坐标、矩形的y坐标、矩形的宽度和高度。这些参数的单位都是像素。</p><h1 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h1><p>2D上下文支持很多在画布上绘制路径的方法。通过路径可以创造出复杂的形状和线条。要绘制路径，首先必须调用beginPath()方法，表示要开始绘制新路径。然后，在调用以下方法来实际地绘制路径。</p><ul><li>arc(x,y,radius,startAngle,endAngle,counterclockwise):以(x,y)为圆心绘制一条弧线，弧线半径为radius，起始和结束角度分别为startAngle和endAngle。最后一个参数表示是否按照逆时针方向计算，值为false表示按顺时针方向计算。</li><li>arcTo(x1,y1,x2,y2,radius):从上一点开始绘制一条弧线，到(x2,y2)为止，并且以给定的半径radius穿过(x1,y1)。</li><li>lineTo(x,y):从上一点开始绘制一条直线，到(x,y)为止。</li><li>moveTo(x,y):将绘图游标移动到(x,y)，不画线。</li></ul><p>创建了路径之后，接下来有几种可能的选择。如果想绘制一条连接到路径起点的线条，可以调用closePath()。如果路径已经完成，你想用fillStyle填充它，可以调用fill方法。另外，还可以调用stroke()方法对路径描边，描边使用的是strokeStyle。最后还可以调用cilp()方法，这个方法可以在路径上创建一个剪切区域。</p><p>下面看一个例子，绘制一个不带数字的时钟表盘。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var drawing = document.getElementById(&quot;drawing&quot;);</div><div class="line">//确定浏览器支持&lt;canvas&gt;元素</div><div class="line">if(drawing.getContext)&#123;</div><div class="line">var context = drawing.getContext(&quot;2d&quot;);</div><div class="line">//开始路径</div><div class="line">context.beginPath();</div><div class="line">//绘制外圆</div><div class="line">context.arc(100,100,99,0,2*Math.PI,false);</div><div class="line">//绘制内圆</div><div class="line">//在绘制内圆之前，必须把路径移动到内圆上的某一点上，以避免绘制出多余的线条</div><div class="line">context.moveTo(194,100);</div><div class="line">context.arc(100,100,94,0,2*Math.PI,false);</div><div class="line">//绘制分针</div><div class="line">context.moveTo(100,100);</div><div class="line">context.lineTo(100,15);</div><div class="line">//绘制时针</div><div class="line">context.moveTo(100,100);</div><div class="line">context.lineTo(35,100);</div><div class="line">//描边路径</div><div class="line">//调用stroke()方法，这样才能把图形绘制到画布上</div><div class="line">context.stroke();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h1><p>文本与图形总是如影随行。为此，2D绘图上下文也提供了绘制文本的方法。绘制文本主要有两个方法：fillText()和strokeText()。这两个方法都可以接受4个参数：要绘制的文本字符串、x坐标、y坐标和可选的最大像素宽度。而且，这两个方法都以下列3个属性为基础。</p><ul><li>font:表示文本样式、大小及字体。</li><li>textAlign:表示文本对齐方式。</li><li>textBaseline:表示文本额基线。</li></ul><h1 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h1><p>2D绘制上下文支持各种基本的绘制变换。创建绘制上下文时，会以默认值初始化变换矩阵，在默认的变换矩阵下，所有的处理都按描述直接绘制。可通过如下方法来修改变换矩阵：</p><ul><li>rotate(angle): 围绕原点旋转图像angle角度。旋转角度，以弧度计。如需将角度转换为弧度，须使用公式degress<em>math.pi/180公式进行计算。例：如需旋转5度，可按如下公式进行计算：5</em>math.pi/180 。</li><li>scale(scalex,scaley):缩放图像。</li><li>transate(x,y):将坐标原点移动到(x,y)。</li><li><p>transform(m1_1,m1_2,m2_1,m2_2, x,y): 直接修改变换矩阵，方式是乘以如下矩阵。</p><p>m1_1   m1_2   dx</p><p>m2_1   m2_2   dy</p><p>0     0     1</p></li><li><p>setTransform(m1_1,m1_2,m2_1,m2_2,x,y): 将变换矩阵重置为默认状态，然后再调用transform()方法。</p></li></ul><p>变换有可能很简单，但也可能很复杂，这都要视情况而定。</p><p>无论是刚才执行的变换，还是fillStyle、strokeStyle等属性，都会在当前上下文中一直有效，除非再对上下文进行什么修改。虽然没有什么办法把上下文中的一切都重置为默认值，但有两个方法可以跟踪上下文的状态变化。如果你知道将来还要返回某组属性与变换的组合，可以调用save()方法。调用这个方法后，当时的所有设置都会进入一个栈结构，得以妥善保存。然后可以对上下文进行其他修改。等想要回到之前保存的设置时，可以调用restore()方法，在保存设置的栈结构中向前返回一级，恢复之前的状态。连续调用save()可以把更多的设置保存到栈结构中，之后再连续调用restore()则得以一级一级返回。需要注意的是，save()方法保存的只是对绘图上下文的设置和变换，不会保存绘图上下文的内容。</p><h1 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h1><p>2d绘制上下文内置了对图像的支持。如果你先想把一幅图像绘制到画布上，可以使用drawimage()方法。最简单的调用方式是传入一个<code>html&lt;img&gt;</code>元素，以及绘制该图像的起点的x和y坐标。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var image = document.images[0];</div><div class="line">context.drawImage(img,10,10);</div></pre></td></tr></table></figure><p>这两行代码取得了文档中的第一幅图像，然后将它绘制到上下文中，起点为(10,10)。</p><p>还可以选择把图像中的某个区域绘制到上下文中。drawimage()方法的这种调用总共需要传入9个参数：要绘制的图像，源图像的x坐标，源图像的y坐标，源图像的宽度，源图像的高度，目标图像的x坐标，目标图像的y坐标，目标图像的宽度，目标图像的高度。这样调用drawimage()方法可以获得最多的控制。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">context.drawImage(img,0,10,50,50,0,100,40,60);</div></pre></td></tr></table></figure><p>这行代码只会把原始图像的一部分绘制到画布上。原始图像的这一部分的起点为(0,10)，宽和高都是50像素。最终绘制到上下文中的图像的起点是(0,100)，而大小变成了40×60像素。</p><h1 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h1><p>2D上下文会根据以下几个属性的值，自动为形状或路径绘制出阴影。</p><ul><li>shadowColor:用CSS颜色格式表示的阴影颜色，默认为黑色。</li><li>shadowOffsetX:形状或路径x轴方向的阴影偏移量，默认为0。</li><li>shadowOffsetY:形状或路径y轴方向的阴影偏移量，默认为0。</li><li>shadowBlur:模糊的像素数，默认0，即不模糊。</li></ul><h1 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h1><p>渐变由CanvasGradient实例表示，很容易通过2D上下文来创建和修改。要创建一个新的线性渐变，可以调用createGradient()方法。这个方法接受4个参数：起点的x坐标、起点的y坐标、终点的x坐标、终点的y坐标。调用这个方法后，它会创建一个指定大小的渐变，并返回CanvasGradient对象的实例。</p><p>创建了渐变对象之后，下一步就是使用addColorStop()方法来指定色标。这个方法接收两个参数：色标位置和CSS颜色值。色标位置是一个0(开始的颜色)到1(结束的颜色)之间的数字。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var gradient = context.createLinearGradient(30,30,70,70);</div><div class="line">gradient.addColor(0,&quot;white&quot;);</div><div class="line">gradient.addColor(1,&quot;black&quot;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1528698052121&amp;amp;di=3afe6c1dd4f64bacf4898fb75980a4e7&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fbpic.ooopic.com%2F15%2F92%2F19%2F15921940-3d2f72ce896b5ad59ccf086e7f6ceb37-0.jpg&quot; alt=&quot;图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="canvas" scheme="http://yoursite.com/categories/canvas/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Next 添加点击爱心效果</title>
    <link href="http://yoursite.com/2018/06/07/Hexo-Next-%E6%B7%BB%E5%8A%A0%E7%82%B9%E5%87%BB%E7%88%B1%E5%BF%83%E6%95%88%E6%9E%9C/index/index/"/>
    <id>http://yoursite.com/2018/06/07/Hexo-Next-添加点击爱心效果/index/index/</id>
    <published>2018-06-07T11:53:50.000Z</published>
    <updated>2018-06-07T13:28:53.640Z</updated>
    
    <content type="html"><![CDATA[<p>给NexT主题内添加页面点击出现爱心的效果</p><h1 id="创建js文件"><a href="#创建js文件" class="headerlink" title="创建js文件"></a>创建js文件</h1><p>在<code>/themes/next/source/js/src</code>下新建文件clicklove.js，接着把该链接下的代码拷贝粘贴到clicklove.js文件中。</p><p>代码如下：</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</div></pre></td></tr></table></figure><h1 id="修改-layout-swig"><a href="#修改-layout-swig" class="headerlink" title="修改_layout.swig"></a>修改_layout.swig</h1><p>在<code>\themes\next\layout\_layout.swig</code>文件末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 页面点击小红心 --&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p>刷新页面，即可实现点击出现爱心效果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给NexT主题内添加页面点击出现爱心的效果&lt;/p&gt;
&lt;h1 id=&quot;创建js文件&quot;&gt;&lt;a href=&quot;#创建js文件&quot; class=&quot;headerlink&quot; title=&quot;创建js文件&quot;&gt;&lt;/a&gt;创建js文件&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;/themes/next/source/js/src&lt;/code&gt;下新建文件clicklove.js，接着把该链接下的代码拷贝粘贴到clicklove.js文件中。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="Next" scheme="http://yoursite.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Hexo NexT主题下添加相册模块</title>
    <link href="http://yoursite.com/2018/06/07/Hexo-NexT%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%A8%A1%E5%9D%97/Hexo-NexT%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%86%8C%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2018/06/07/Hexo-NexT主题下添加相册模块/Hexo-NexT主题下添加相册模块/</id>
    <published>2018-06-07T01:40:20.000Z</published>
    <updated>2018-06-07T13:21:27.800Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1528375076152&amp;di=26abd9c0dca2ed73a59c069cd001a9cc&amp;imgtype=0&amp;src=http%3A%2F%2Fbpic.wotucdn.com%2F14%2F69%2F69%2F14696996-6a1bb0435b61ccad0b3437b6fd2bb102-0.jpg" alt="图片"><br><a id="more"></a></p><h1 id="新建相册页面"><a href="#新建相册页面" class="headerlink" title="新建相册页面"></a>新建相册页面</h1><p>首先新建相册页面<code>hexo new page photos</code>,将会在<code>source/</code>下创建<code>photos/index.md</code>，在其中添加type: photos。</p><h1 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h1><p>在主题<code>_config.yml</code>文件中对应位置<code>menu</code>里添加<code>Photos: /photos/</code>，这样生成后就能在页面的菜单栏中出现相册选项。</p><h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><p>在博客根目录下新建<code>uploadPhotos</code>文件夹，里面将会存放照片以及相关js文件。<br>新建<code>uploadPhotos/Images/</code>文件夹，然后在其中存放需要在页面中展示的照片集（在GitHub中新建相册库，并上传图片）。<br>新建<code>uploadPhotos/tool.js</code>文件，里面内容如下，主要功能是访问照片文件夹，获取每张照片的<code>size</code>和<code>name</code>，并生成对应的json文件：<br>命令：<code>Git Bash</code>中键入 <code>node tool.js</code>生成json。<br>注：若出现<code>Error: Cannot find module &#39;image-size&#39;</code>问题，请在<code>Git Bash</code>中键入对应命令<code>npm install image-size</code>进行安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&quot;use strict&quot;;</div><div class="line">    const fs = require(&quot;fs&quot;);</div><div class="line">    const sizeOf = require(&apos;image-size&apos;);</div><div class="line">    const path = &quot;Images&quot;;</div><div class="line">    const output = &quot;../themes/next/source/photos/photoslist.json&quot;;</div><div class="line">    var dimensions;</div><div class="line">    fs.readdir(path, function (err, files) &#123;</div><div class="line">        if (err) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        let arr = [];</div><div class="line">        (function iterator(index) &#123;</div><div class="line">            if (index == files.length) &#123;</div><div class="line">                fs.writeFile(output, JSON.stringify(arr, null, &quot;\t&quot;));</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">            fs.stat(path + &quot;/&quot; + files[index], function (err, stats) &#123;</div><div class="line">                if (err) &#123;</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">                if (stats.isFile()) &#123;</div><div class="line">                    dimensions = sizeOf(path + &quot;/&quot; + files[index]);</div><div class="line">                    console.log(dimensions.width, dimensions.height);</div><div class="line">                    arr.push(dimensions.width + &apos;.&apos; + dimensions.height + &apos; &apos; + files[index]);</div><div class="line">                &#125;</div><div class="line">                iterator(index + 1);</div><div class="line">            &#125;)</div><div class="line">        &#125;(0));</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p><p>json文件样例如下(图片宽度.图片高度+空格+图片名.图片格式):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">&quot;440.556 IMG_0101.jpg&quot;,</div><div class="line">&quot;440.613 IMG_0102.jpg&quot;,</div><div class="line">&quot;440.612 IMG_0103.jpg&quot;,</div><div class="line">&quot;440.612 IMG_0104.jpg&quot;,</div><div class="line">&quot;200.245 IMG_0105.jpg&quot;,</div><div class="line">&quot;440.610 IMG_0106.jpg&quot;,</div><div class="line">]</div></pre></td></tr></table></figure></p><h1 id="photo-js"><a href="#photo-js" class="headerlink" title="photo.js"></a>photo.js</h1><p>新建<code>themes/next/source/photos/photo.js</code>文件，其中<code>photos</code>文件夹是自己创建的.<br>photos.js内容如下，主要功能是访问json文件内容，遍历每行数据，并在页面对应位置上放置代码，展示图片（其中图片链接为自个GitHub相册库中图片的链接）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">photo =&#123;</div><div class="line">    page: 1,</div><div class="line">    offset: 20,</div><div class="line">    init: function () &#123;</div><div class="line">        var that = this;</div><div class="line">        $.getJSON(&quot;/photos/photoslist.json&quot;, function (data) &#123;</div><div class="line">            that.render(that.page, data);</div><div class="line">            //that.scroll(data);</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    render: function (page, data) &#123;</div><div class="line">        var begin = (page - 1) * this.offset;</div><div class="line">        var end = page * this.offset;</div><div class="line">        if (begin &gt;= data.length) return;</div><div class="line">        var html, imgNameWithPattern, imgName, imageSize, imageX, imageY, li = &quot;&quot;;</div><div class="line">        for (var i = begin; i &lt; end &amp;&amp; i &lt; data.length; i++) &#123;</div><div class="line">           imgNameWithPattern = data[i].split(&apos; &apos;)[1];</div><div class="line">           imgName = imgNameWithPattern.split(&apos;.&apos;)[0]</div><div class="line">           imageSize = data[i].split(&apos; &apos;)[0];</div><div class="line">           imageX = imageSize.split(&apos;.&apos;)[0];</div><div class="line">           imageY = imageSize.split(&apos;.&apos;)[1];</div><div class="line">            li += &apos;&lt;div class=&quot;card&quot; style=&quot;width:330px&quot;&gt;&apos; +</div><div class="line">                    &apos;&lt;div class=&quot;ImageInCard&quot; style=&quot;height:&apos;+ 330 * imageY / imageX + &apos;px&quot;&gt;&apos; +</div><div class="line">                      &apos;&lt;a data-fancybox=&quot;gallery&quot; href=&quot;https://github.com/asdfv1929/BlogPhotos/blob/master/Images/&apos; + imgNameWithPattern + &apos;?raw=true&quot; data-caption=&quot;&apos; + imgName + &apos;&quot;&gt;&apos; +</div><div class="line">                        &apos;&lt;img src=&quot;https://github.com/asdfv1929/BlogPhotos/blob/master/Images/&apos; + imgNameWithPattern + &apos;?raw=true&quot;/&gt;&apos; +</div><div class="line">                      &apos;&lt;/a&gt;&apos; +</div><div class="line">                    &apos;&lt;/div&gt;&apos; +</div><div class="line">                    // &apos;&lt;div class=&quot;TextInCard&quot;&gt;&apos; + imgName + &apos;&lt;/div&gt;&apos; +</div><div class="line">                  &apos;&lt;/div&gt;&apos;</div><div class="line">        &#125;</div><div class="line">        $(&quot;.ImageGrid&quot;).append(li);</div><div class="line">        $(&quot;.ImageGrid&quot;).lazyload();</div><div class="line">        this.minigrid();</div><div class="line">    &#125;,</div><div class="line">    minigrid: function() &#123;</div><div class="line">        var grid = new Minigrid(&#123;</div><div class="line">            container: &apos;.ImageGrid&apos;,</div><div class="line">            item: &apos;.card&apos;,</div><div class="line">            gutter: 12</div><div class="line">        &#125;);</div><div class="line">        grid.mount();</div><div class="line">        $(window).resize(function() &#123;</div><div class="line">           grid.mount();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">photo.init();</div></pre></td></tr></table></figure></p><h1 id="photos-swig"><a href="#photos-swig" class="headerlink" title="photos.swig"></a>photos.swig</h1><p>新建<code>themes/next/layout/photos.swig</code>文件，其内容模仿<code>tag.swig</code>中内容（直接复制粘贴），然后将其中的<code>tag</code>全部替换为<code>photos</code>。</p><h1 id="photos-css"><a href="#photos-css" class="headerlink" title="photos.css"></a>photos.css</h1><p>新建<code>themes/next/source/photos/photos.css</code>样式文件，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.ImageGrid &#123;width: 100%;max-width: 1040px;margin: 0 auto; text-align: center;&#125;</div><div class="line">.card &#123;overflow: hidden;transition: .3s ease-in-out; border-radius: 8px; background-color: #ddd;&#125;</div><div class="line">.ImageInCard &#123;&#125;</div><div class="line">.ImageInCard img &#123;padding: 0 0 0 0;&#125;</div><div class="line">.TextInCard &#123;line-height: 54px; background-color: #ffffff; font-size: 24px;&#125;</div></pre></td></tr></table></figure></p><h1 id="page-swig"><a href="#page-swig" class="headerlink" title="page.swig"></a>page.swig</h1><p>修改<code>themes/next/layout/page.swig</code>文件，添加下面代码中中间page.type === “photos”那两行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;% block title %&#125;&#123;#</div><div class="line">#&#125;&#123;% set page_title_suffix = &apos; | &apos; + config.title %&#125;&#123;#</div><div class="line">#&#125;&#123;% if page.type === &quot;categories&quot; and not page.title %&#125;&#123;#</div><div class="line">  #&#125;&#123;&#123; __(&apos;title.category&apos;) + page_title_suffix &#125;&#125;&#123;#</div><div class="line">#&#125;&#123;% elif page.type === &quot;tags&quot; and not page.title %&#125;&#123;#</div><div class="line">  #&#125;&#123;&#123; __(&apos;title.tag&apos;) + page_title_suffix &#125;&#125;&#123;#</div><div class="line">#&#125;&#123;% elif page.type === &quot;photos&quot; and not page.title %&#125;&#123;#</div><div class="line">  #&#125;&#123;&#123; __(&apos;title.photos&apos;) + page_title_suffix &#125;&#125;&#123;#</div><div class="line">#&#125;&#123;% else %&#125;&#123;#</div><div class="line">  #&#125;&#123;&#123; page.title + page_title_suffix &#125;&#125;&#123;#</div><div class="line">#&#125;&#123;% endif %&#125;&#123;#</div><div class="line">#&#125;&#123;% endblock %&#125;</div></pre></td></tr></table></figure></p><h1 id="layout-swig"><a href="#layout-swig" class="headerlink" title="_layout.swig"></a>_layout.swig</h1><p>在主题<code>_layout.swig</code>文件末尾，添加内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/lazyload@2.0.0-beta.2/lazyload.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://unpkg.com/minigrid@3.1.1/dist/minigrid.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/photos/photos.css&quot;&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/photos/photo.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.3.5/jquery.fancybox.min.css&quot; /&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.3.5/jquery.fancybox.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p><p>整个过程结束，查看图片是否以瀑布流的方式呈现。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>在花了两天的时间来实现相册模块，网上查阅了很多博文，期间碰到很多问题都一一解决了。期间花费时间最长的一个问题是图片无法加载，后来发现是图片链接地址写错，真的是坑。将照片存放在一个新的github仓库中，单个照片的链接居然跟外层的链接不一样。我还以为是其他地方出了问题，一直在改其他地方。</p></li><li><p>参考链接博主给了我很大帮助，在此表示感谢。</p></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://asdfv1929.github.io/2018/05/26/next-add-photos/" target="_blank" rel="external">Hexo NexT主题内添加相册功能</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1528375076152&amp;amp;di=26abd9c0dca2ed73a59c069cd001a9cc&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fbpic.wotucdn.com%2F14%2F69%2F69%2F14696996-6a1bb0435b61ccad0b3437b6fd2bb102-0.jpg&quot; alt=&quot;图片&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>海康前端开发实习面经</title>
    <link href="http://yoursite.com/2018/06/05/%E6%B5%B7%E5%BA%B7%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/%E6%B5%B7%E5%BA%B7%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E9%9D%A2%E7%BB%8F/"/>
    <id>http://yoursite.com/2018/06/05/海康前端开发实习面经/海康前端开发实习面经/</id>
    <published>2018-06-05T11:47:13.000Z</published>
    <updated>2018-06-07T09:19:43.982Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1528364469223&amp;di=fa8284b14397dde0b759e62c11b7fdf0&amp;imgtype=0&amp;src=http%3A%2F%2Fbpic.ooopic.com%2F16%2F06%2F82%2F16068220-f011534649bab9b75a687a80d3aa2d1f-0.jpg" alt="图片描述"></p><a id="more"></a><hr><ol><li>自我介绍</li><li>Ajax相关知识</li><li>数据库增删改查</li><li>如何获取元素（DOM操作）</li><li>盒模型</li><li>存储cookie、sessionStorage、localStorage</li><li>常用的http状态码</li><li>常用的http请求方式</li><li>GET和POST区别</li><li>闭包、作用域</li><li>事件冒泡、事件捕获</li><li>布局，div+css</li><li>框架vue组件相互通信、jquery、bootStrap</li><li>对后端有了解么</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1528364469223&amp;amp;di=fa8284b14397dde0b759e62c11b7fdf0&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fbpic.ooopic.com%2F16%2F06%2F82%2F16068220-f011534649bab9b75a687a80d3aa2d1f-0.jpg&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面经" scheme="http://yoursite.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>阿里前端开发实习生面经</title>
    <link href="http://yoursite.com/2018/06/04/%E9%98%BF%E9%87%8C%E9%9D%A2%E7%BB%8F/%E9%98%BF%E9%87%8C%E9%9D%A2%E7%BB%8F/"/>
    <id>http://yoursite.com/2018/06/04/阿里面经/阿里面经/</id>
    <published>2018-06-04T12:49:05.000Z</published>
    <updated>2018-06-07T06:55:08.511Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1528364469222&amp;di=59820fa07df3a41d54b9bedaf7cda152&amp;imgtype=0&amp;src=http%3A%2F%2Fimg010.hc360.cn%2Fhb%2FMTQ3NDIxNzUzMjU2NzEyNzU2MDI1ODA%3D.jpg" alt="图片描述"></p><a id="more"></a><hr><h1 id="阿里一面"><a href="#阿里一面" class="headerlink" title=" 阿里一面 "></a><strong> 阿里一面 </strong></h1><ol><li>自我介绍一下</li><li>DOCTYPE是什么，有几种模式，分别阐述一下</li><li>CSS盒模型在W3C下和IE下有什么不同</li><li>有一堆2分、3分、5分的硬币，要凑成一块钱，有几种组合，用代码实现一下</li><li>一个ul下面有很多li，把这些li倒过来放置（包括里面的内容），用DOM操作实现一下</li><li>一个li绑定了一个事件，然后把这个li删除了，问这个事件还存在么，为什么</li><li>为什么想从事前端开发</li></ol><hr><h1 id="阿里二面"><a href="#阿里二面" class="headerlink" title=" 阿里二面 "></a><strong> 阿里二面 </strong></h1><ol><li>自我介绍，说了有发明专利公开，先讲一下发明专利的东西</li><li>箭头函数(作用域)</li><li>数组常用的API</li><li>事件传播过程（事件冒泡和事件捕获）</li><li>addEventListener有几个参数，第三个参数什么意思</li><li>setTimeout有几个参数，如果第二个参数设置为0，会立即执行么（单线程）</li><li>前序遍历不用递归写，先用栈写，再用队列写</li><li>看了哪些前端开方方面的书</li><li>最快的排序是哪种，快排的实现原理，罗列出所有时间复杂度nlogn的排序算法</li><li>在搭建个人博客中遇到的问题</li></ol><hr><h1 id="阿里三面"><a href="#阿里三面" class="headerlink" title=" 阿里三面 "></a><strong> 阿里三面 </strong></h1><ol><li>用三句简短的话介绍下自己</li><li>阐述一下专利的内容以及应用场景</li><li>为什么想从事前端开发</li><li>最近在干什么（搭博客）</li><li>有没有自己的代码沉淀？？？？</li><li>项目中遇到哪些问题怎么解决的</li><li>Github中有没有可以展示的作品</li><li>讲一下最近一篇博客写了什么</li><li>笔试中一道编程题实现一下（CSS选择器）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1528364469222&amp;amp;di=59820fa07df3a41d54b9bedaf7cda152&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fimg010.hc360.cn%2Fhb%2FMTQ3NDIxNzUzMjU2NzEyNzU2MDI1ODA%3D.jpg&quot; alt=&quot;图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="面经" scheme="http://yoursite.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="面经" scheme="http://yoursite.com/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>如何用HEXO+github搭建个人博客</title>
    <link href="http://yoursite.com/2017/11/02/hello/hello/"/>
    <id>http://yoursite.com/2017/11/02/hello/hello/</id>
    <published>2017-11-02T13:34:21.000Z</published>
    <updated>2017-11-02T14:00:50.242Z</updated>
    
    <content type="html"><![CDATA[<p>如何用HEXO+github搭建个人博客<br>HEXO是一个简单的、轻量的、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github上。原理：github存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的内容就是讲这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。<br><a id="more"></a><br>系统环境配置：要使用Hexo，需要在你的系统中支持Node.js以及Git。<br>安装Node（必须），作用：用来生成静态页面，到Node.js官网下载和自己电脑相匹配的版本，除了指定安装路径，一路安装即可。<br>安装Git（必须），作用：把本地的hexo内容提交到github上去，申请github账号，作用：是用来做博客的远成仓库、域名、服务器之类的。<br>验证软件是否安装正确：<br>同时按下win键或R键（或点击“开始菜单”&gt;点击“运行”），打开运行窗口，输入“cmd”，然后输入以下命令：<br><img src="/2017/11/02/hello/hello/1.png" alt="图片"><br><img src="/2017/11/02/hello/hello/2.png" alt="图片"><br>显示版本信息，说明安装成功。<br>申请gitub账号：<br>注册完成后，点击“New repository”，新建一个版本库。<br><img src="/2017/11/02/hello/hello/3.png" alt="图片"><br>输入repository name:yourname.github.io(yourname与你的注册用户名一致，这就是你博客的域名了)。<br><img src="/2017/11/02/hello/hello/4.png" alt="图片"><br>到此，github账号申请完成。<br>安装hexo：<br>在自己认为合适的地方创建一个文件夹，这里以E：/hexo为例，首先在E盘目录下创建HEXO文件夹，并在命令行的窗口进入到该目录下<br><img src="/2017/11/02/hello/hello/5.png" alt="图片"><br>在命令行中输入：<br><img src="/2017/11/02/hello/hello/6.png" alt="图片"><br><img src="/2017/11/02/hello/hello/7.png" alt="图片"><br>可能会看到一个WARN，但是不用担心，不会影响正常使用，然后输入：<br>等待进度条安装到100，然后测试hexo是否安装完成，输入：<br><img src="/2017/11/02/hello/hello/8.png" alt="图片"><br><img src="/2017/11/02/hello/hello/9.png" alt="图片"><br>安装完成。<br>HEXO的相关配置：<br>1.初始化HEXO，接着上面的操作，输入：<br><img src="/2017/11/02/hello/hello/10.png" alt="图片"><br>再输入：<br><img src="/2017/11/02/hello/hello/11.png" alt="图片"><br>之后npm将会自动安装你需要的组件，只需等待npm操作即可。<br>2.首次体验HEXO<br>继续操作，同样在命令行输入：<br><img src="/2017/11/02/hello/hello/12.png" alt="图片"><br><img src="/2017/11/02/hello/hello/13.png" alt="图片"><br>然后输入：<br><img src="/2017/11/02/hello/hello/14.png" alt="图片"><br>提示：<br><img src="/2017/11/02/hello/hello/15.png" alt="图片"><br>在浏览器中打开<a href="http://localhost:4000/，你将会看到：" target="_blank" rel="external">http://localhost:4000/，你将会看到：</a><br><img src="/2017/11/02/hello/hello/16.png" alt="图片"><br>HEXO常用的几个命令：<br>（1）    hexo generate (hexo g)生成静态文件，会在当前目录下生成一个新的叫做public的文件夹<br>（2）    hexo server(hexo s)启动本地web服务，用于博客的预览<br>（3）    hexo deploy(hexo d)部署博客到远端（GitHub平台）<br>将HEXO与github联系起来：<br>大致分为两步：（1）配置git个人信息；（2）配置Deployment</p><p>Hexo不是处理命令时：<br>$ npm install hexo -g</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何用HEXO+github搭建个人博客&lt;br&gt;HEXO是一个简单的、轻量的、基于Node的一个静态博客框架，可以方便的生成静态网页托管在github上。原理：github存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的内容就是讲这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>HTTP报文格式解析</title>
    <link href="http://yoursite.com/2017/11/02/HTTP/HTTP/"/>
    <id>http://yoursite.com/2017/11/02/HTTP/HTTP/</id>
    <published>2017-11-02T13:28:07.000Z</published>
    <updated>2018-06-07T09:19:14.182Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP报文格式解析<br>一．概述<br>HTTP报文是面向文本的，报文中的每一个字段都是ASCII码串，各个字段的长度是不确定的。HTTP有两类报文：请求报文和响应报文。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP报文格式解析&lt;br&gt;一．概述&lt;br&gt;HTTP报文是面向文本的，报文中的每一个字段都是ASCII码串，各个字段的长度是不确定的。HTTP有两类报文：请求报文和响应报文。&lt;/p&gt;

      
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP协议" scheme="http://yoursite.com/tags/HTTP%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>cookie、sessionStorage区别</title>
    <link href="http://yoursite.com/2017/09/29/cookie%E3%80%81sessionStorage%E5%8C%BA%E5%88%AB/cookie%E3%80%81sessionStorage%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2017/09/29/cookie、sessionStorage区别/cookie、sessionStorage区别/</id>
    <published>2017-09-29T07:22:17.000Z</published>
    <updated>2018-06-07T09:22:01.596Z</updated>
    
    <content type="html"><![CDATA[<p>cookie 和session 的区别详解:<br>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p><p>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br>   考虑到安全应当使用session。<br><a id="more"></a><br>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br>   考虑到减轻服务器性能方面，应当使用COOKIE。</p><p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p><p>5、所以个人建议：<br>   将登陆信息等重要信息存放为SESSION<br>   其他信息如果需要保留，可以放在COOKIE中</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cookie 和session 的区别详解:&lt;br&gt;1、cookie数据存放在客户的浏览器上，session数据放在服务器上。&lt;/p&gt;
&lt;p&gt;2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗&lt;br&gt;   考虑到安全应当使用session。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="存储" scheme="http://yoursite.com/categories/%E5%AD%98%E5%82%A8/"/>
    
    
      <category term="存储" scheme="http://yoursite.com/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer(3)</title>
    <link href="http://yoursite.com/2017/09/15/offer/offer/"/>
    <id>http://yoursite.com/2017/09/15/offer/offer/</id>
    <published>2017-09-15T02:28:26.000Z</published>
    <updated>2018-06-07T09:19:00.366Z</updated>
    
    <content type="html"><![CDATA[<p>题目：输入一个链表，从尾到头打印链表每个节点的值。<br><a id="more"></a><br>function printListFromTailToHead(head)<br>{<br>    var arr = [];<br>        while(head!=null){<br>        arr.push(head.val);<br>        head = head.next;<br>    }<br>    return arr.reverse();<br>}<br>思路：先将链表每个结点的值存入数组中，然后通过数组的reverse()方法，即可从尾到头打印。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：输入一个链表，从尾到头打印链表每个节点的值。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>hexo生成博文插入图片</title>
    <link href="http://yoursite.com/2017/09/11/hexo%E5%8D%9A%E6%96%87%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/hexo%E5%8D%9A%E6%96%87%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2017/09/11/hexo博文插入图片/hexo博文插入图片/</id>
    <published>2017-09-11T02:23:50.000Z</published>
    <updated>2018-06-07T09:33:20.636Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/09/11/hexo博文插入图片/hexo博文插入图片/1.jpg" alt="图片"><br><a id="more"></a><br>1.把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true。<br>2.在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件，来自dalao：dalao的git。<br>3.等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹。<br>4.最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：<img src="/2017/09/11/hexo博文插入图片/hexo博文插入图片/xxxx/图片名.jpg" alt="你想输入的替代文字">。<br>注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。<br>5.最后检查一下，hexo g生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&quot;&gt;</code>。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/09/11/hexo博文插入图片/hexo博文插入图片/1.jpg&quot; alt=&quot;图片&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer(2):替换空格</title>
    <link href="http://yoursite.com/2017/09/10/offer/%E5%89%91%E6%8C%87offer(2)/"/>
    <id>http://yoursite.com/2017/09/10/offer/剑指offer(2)/</id>
    <published>2017-09-10T12:36:37.000Z</published>
    <updated>2018-06-07T09:18:35.877Z</updated>
    
    <content type="html"><![CDATA[<p>题目：请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。<br><a id="more"></a><br>function replaceSpace(str)<br>{<br>    return str.replace(/\s/g,’%20’);<br>}<br>思路：用正则表达式查找数字组中的所有空格，然后用str.replace替换。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目：请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="数组" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer(1):二维数组中的查找</title>
    <link href="http://yoursite.com/2017/09/10/offer/%E5%89%91%E6%8C%87offer(1)/"/>
    <id>http://yoursite.com/2017/09/10/offer/剑指offer(1)/</id>
    <published>2017-09-10T12:09:34.000Z</published>
    <updated>2018-06-07T09:12:34.431Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2017/09/10/offer/剑指offer(1)/1.jpg" alt=""><br>题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br><a id="more"></a><br>function Find(target, array)<br>{<br>    var row = array.length;    //行数<br>    var col = array[0].length;    //列数<br>    var r = row-1;    //从左下角开始比较<br>    var c = 0;<br>    while( r &gt;= 0 &amp;&amp; c &lt;= col-1){<br>        if(target &gt; array[r][c]){<br>            c++;<br>        }else if(target &lt; array[r][c]){<br>            r–;<br>        }else{<br>            return true;<br>        }<br>    }<br>    return false;<br>}<br>思路：因为矩阵的特殊性，所以先从最后一行第一列开始比较，小于则向上查找，大于则向后查找。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2017/09/10/offer/剑指offer(1)/1.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;题目：在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
</feed>
